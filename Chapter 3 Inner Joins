/*
前面的章节都是只选择了一张表格
这一章模拟的是应用多张表格
*/
# 3.1 Inner Join 内连接
-- 这一课教的是连接两个表格的方法
-- 这里的应用是选取orders和customers的customer_id并连接
-- 以此得到同一个顾客下的不同订单
SELECT order_id, o.customer_id, first_name, last_name
-- 这里要指定customer_id来自于哪个表，因为两个表都有此列
-- 不指明的话会报错‘ambiguous’
FROM sql_store.orders AS o -- AS可以省略
INNER JOIN customers AS c -- AS可以省略, INNER也可以省略
		ON o.customer_id = c.customer_id

# 练习3.1
-- 	对照order items表，和products表连接
-- 每笔订单都返回订单id，产品id和名字，连同order items表的数量和单价
SELECT  order_id, oi.product_id, name, quantity, oi.unit_price -- order_id仅在oi表出现，无需指定
FROM order_items AS oi
INNER JOIN products AS pd
	ON oi.product_id = pd.product_id
-- 简洁版：
SELECT order_id, oi.product_id, name, quantity, oi.unit_price
FROM order_items oi
JOIN products p
  ON oi.product_id = p.product_id

# 3.2 Joining Across Databases 跨数据库连接
-- 假设要将(1)sql_store的order_items表
-- 和(2)sql_inventory的products表连接
USE sql_store; 
SELECT *
FROM order_items oi
-- 因为在课程开始选择的就是sql_store的数据库
-- 所以第一行order_item不用指定数据库
-- 只需要给不在当前数据库的表加前缀
JOIN sql_inventory.products p
	ON oi.product_id = p.product_id

# 3.3 Self Joins
-- 将一个表自己连接自己称之为自连接
-- 和内连接操作大抵相同
-- 只是需要注意给表添加不同别称即可
USE sql_hr; 

SELECT 
	e.employee_id, 
    	e.first_name AS employee, 
--    	e.last_name, 
--    	e.job_title, 
--    	e.reports_to, 
    	m.first_name AS manager
FROM employees e
JOIN employees m
	ON e.reports_to = m.employee_id

# 3.4 Joining Multiple Tables
-- 为了制造一个简洁的包含订单id，用户姓名以及订单状态的表格
-- 需要连接来自customers的姓名，orders的order_id, order_statues的状态
-- 自己先写一遍！
USE sql_store; 

SELECT order_id, order_date, c.first_name, c.last_name, os.name
FROM orders o
JOIN customers c
	ON c.customer_id = o.customer_id
JOIN order_statuses os
	ON o.status = os.order_status_id
ORDER BY name, order_id

-- 老师写的：
SELECT 
	order_id, 
    order_date, 
    c.first_name, 
    c.last_name, 
    os.name AS status
FROM orders o
JOIN customers c
	ON c.customer_id = o.customer_id
JOIN order_statuses os
	ON o.status = os.order_status_id
ORDER BY name, order_id

# 练习3.4
-- 从sql_invoicing连接必要的表格
-- 制造一张含有顾客姓名，付款方式，日期的表格
-- 因为题目没有明确需求，自己发挥选择什么列来制造表格

USE sql_invoicing; 

SELECT 
 	p.payment_id, 
--	p.invoice_id
    p.date, 
    c.name AS client_name, 
    p.amount, 
    pm.name AS payment_method
FROM payments p
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id
JOIN clients c
	ON p.client_id = c.client_id

# 3.5 Compound Join Conditions 复合连接条件
-- 当一个表有两个主键时，比如order_items的主键是产品id和订单id
-- 这时候就要用到复合连接
-- 基本就是在之前学过的连接加一个AND条件。
-- 这里记得按照视频改order_item_notes的数据
USE sql_store;

SELECT *
FROM order_items oi
JOIN order_item_notes oin
	ON oi.order_id = oin.order_id
    AND oi.product_id = oin.product_id

# 3.6 Implicit Join Syntax 隐式连接语法
SELECT *
FROM orders o
JOIN customers c
	ON o.customer_id = c.customer_id
-- 上述是之前学过的连接语法，也是比较常见的 
-- 下面是隐式连接的一个例子，和上面等效
-- 但是不建议用，因为如果忘记WHERE子句，就会得到交叉连接的结果
-- （似乎又称笛卡尔积/笛卡尔爆炸？
SELECT *
FROM orders o, customers c
WHERE    o.customer_id = c.customer_id

# 3.7 Outer Joins 外连接
-- 先回顾一个内连接的简单例子：
SELECT 
	c.customer_id, 
    c.first_name, 
    o.order_id
FROM customers c
JOIN orders o
	ON c.customer_id = o.customer_id -- 代表着在orders下了单的customers的顾客
    -- 不会显示没下订单的顾客
    -- 简称：交集
ORDER BY c.customer_id 

-- 外连接有两种类型: Left Join & Right Join
-- Left Join代表所有左（上FROM）表的所有记录都会被返回，无论是否符合条件
-- 在此例中会返回所有顾客
-- Right Join 同理，在此例中会返回所有订单
-- LEFT/RIGHT (OUTER) JOIN，这里OUTER可有可无，和INNER一样

/*
总结：只写JOIN，内连接；加LEFT/RIGHT, 外连接；OUTER/INNER可忽略
*/

# 练习3.7
-- 这个练习是外连接products和order_items表
SELECT 
	p.product_id, 
    p.name, 
    oi.quantity
FROM products p
LEFT JOIN order_items oi
	ON p.product_id = oi.product_id
ORDER BY product_id

# 3.8 Outer Join Between Multiple Tables
-- 跨多个表外连接，基本原理两个表外连接是一样的
-- 只是需要多加一行外连接语句而已
-- 尽量避免使用RIGHT JOIN以简化代码
USE sql_store; 
SELECT 
	c.customer_id, 
    c.first_name, 
    o.order_id, 
    s.name AS shipper_name
FROM customers c
LEFT JOIN orders o
	ON c.customer_id = o.customer_id 
LEFT JOIN shippers s
	ON o.shipper_id = s.shipper_id
ORDER BY c.customer_id 

# 练习3.8
-- 写一段查询，生成：
-- 订单日期，订单id，顾客名，运输商名字，订单状态
SELECT 
	o.order_date, 
    o.order_id, 
    c.first_name AS customer, 
    sp.name AS shipper, 
    os.name AS status
FROM customers c
JOIN orders o
	ON c.customer_id = o.customer_id
LEFT JOIN shippers sp

# 3.9 Self Outer Joins
USE sql_hr; 

SELECT 
	e.employee_id, 
	e.first_name, 
    e.last_name, 
    e.reports_to AS manager, 
    m.last_name
FROM employees e
LEFT JOIN employees m
	ON e.reports_to = m.employee_id -- 只会返回符合该条件的人，因此不会显示CEO
    -- 用LEFT JOIN 可以解决
	ON o.shipper_id = sp.shipper_id
LEFT JOIN order_statuses os
	ON o.status = os.order_status_id
ORDER BY status, order_id

# 3.10 The USING Clause
-- 仅在不同表中具有同名列的时候可以使用USING
USE sql_store; 
SELECT 
	o.order_id, 
    c.first_name, 
    sh.name AS shipper
FROM orders o
JOIN customers c
	-- ON o.customer_id = c.customer_id
    USING (customer_id) -- 两行完全等效
LEFT JOIN shippers sh
	USING (shipper_id)

-- 当具备两个主键的时候以及两个表共享两个同名列的时候，怎么用USING？
/*
USE sql_store; 
SELECT *
FROM order_items oi
JOIN order_item_notes oin
	USING (order_id, product_id) 
*/

# 练习3.10
-- 使用sql_invoicing数据库
-- 从payments写一段查询，生成：
-- date, client, amount, payment_method. 
USE sql_invoicing; 
SELECT 
	p.date, 
    c.name AS client, 
    p.amount, 
    pm.name AS payment_method
FROM payments p
JOIN clients c
	USING (client_id)
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id

# 3.11 Natural Joins
-- 不建议使用，了解有就好。
-- 这种方式数据库会自己看着办，选择相同的列连接
-- 因为无法控制结果所以不建议使用
USE sql_store; 
SELECT 
	o.order_id, 
    c.first_name
FROM orders o
NATURAL JOIN customers c

# 3.12 Cross Joins
SELECT 
	c.first_name AS customer, 
    p.name AS product
FROM customers c -- , products p
CROSS JOIN products p -- 这种是显性表达语句
ORDER BY c.first_name
-- 这里的结果就是笛卡尔乘积！
-- 隐形表达语句就是在FROM后面列出来要交叉连接的表格

# 练习3.12
-- Do a cross join between shippers and products
-- 	using the implicit syntax
-- and then using the explicit syntax
SELECT 
	sh.name AS shipper, 
	p.name AS product
FROM shippers sh-- , products p
CROSS JOIN products p
ORDER BY sh.name

# 3.13 Unions
-- 简单粗暴的合并多段查询记录
-- 只需要加在两端查询语段中间！
-- 这时候语段就不需要加分号了。
-- UNION去重，UNION ALL不去重
-- 需要注意，SELECT这里的返回列数量一定要保持一样
SELECT -- 这一列决定了返回结果的列名
	order_id, 
    order_date, 
    'Active' AS status
FROM orders o
WHERE order_date >= '2019-01-01' AND order_date < '2020-01-01'
UNION
SELECT 
	order_id, 
    order_date, 
    'Archive' AS status
FROM orders o
WHERE order_date < '2019-01-01'

# 练习3.13
-- 写一段查询返回顾客id，顾客名，顾客积分，积分类型
-- 积分类型：<2000 BRONZE，2000-3000 SILVER，>3000 GOLD
-- 按照名字排序
SELECT 
	customer_id, 
    first_name, 
    points, 
    'Bronze' AS type
FROM customers
WHERE points < 2000
UNION
SELECT 
	customer_id, 
    first_name, 
    points, 
    'Silver'
FROM customers
WHERE points >= 2000 AND points < 3000 -- 简化：WHERE points BETWEEN 2000 AND 3000
UNION
SELECT 
	customer_id, 
    first_name, 
    points, 
    'Gold'
FROM customers
WHERE points >= 3000
ORDER BY first_name
