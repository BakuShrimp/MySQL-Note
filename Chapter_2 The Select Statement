"""
Date: 11/30/2023
"""

*ctrl + shift + enter 是执行命令快捷键*

# 选择子句 -- The Select Statement
# 2.1 The SELECT Clause
SELECT *columns* -- 选择数据集里面的某些列
      column_1, 
      column_2, 
      column_3 (with math calculation) AS *rename*
FROM *Datasets/Tables* -- 从指定的数据集里面选
WHERE *filter* -- 筛选条件
ORDER BY *columns* -- 根据某一列来升序排列

# 练习作业2.1
-- Return all the products
--       name
--       unit_price
--       new price(unit_price * 1.1)
SELECT 
	name, 
    unit_price, 
    unit_price * 1.1 AS 'new price'
FROM products

# 2.2 The WHERE Clause
SELECT *
FROM customers
-- WHERE points > 3000
-- comparison operators: >, >=, <, <=, =, !=, <> 后面两个都是‘不等于’
-- WHERE state != 'VA' -- 要给字符串加单双引号，没有大小写区别 
WHERE birth_date > '1990-01-01' -- 即使日期不是string, 也得加单双引号

# 练习2.2
-- Get the orders placed this year (2019)
SELECT * 
FROM orders
WHERE order_date >= '2019-01-01' -- 这不严谨，因为没有将‘2020年之前’作为条件之一

# 2.3 The AND, OR and NOT operator
-- AND 同时满足条件 OR 满足其中一个条件即可 
-- 逻辑运算符优先顺序：NOT > AND > OR 
-- AND OR 的运用实例：
SELECT * 
FROM customers
WHERE birth_date >= '1990-01-01' OR 
	  (points > 1000 AND state = 'VA') -- 条件1 1990-01-01后出生；条件2 积分>1000且生活在VA。
					   -- 此处加不加括号都一样，因为AND优先级高于OR，加了易于理解而已。

-- NOT的运用实例
SELECT * 
FROM customers
WHERE NOT (birth_date >= '1990-01-01' OR points > 1000) -- 数学意义上的逐个否定/反义词
-- WHERE birth_date < '1990-01-01' AND points <=1000 -- 上面那条与这个等效

# 练习2.3
-- From the order_items table, get the items
-- 	for order #6
-- 	where the total price is greater than 30
SELECT *
FROM order_items
WHERE order_id = 6 AND (quantity * unit_price) > 30

# 2.4 The IN operator
-- 当你想将多个同类型的条件放在同一个WHERE后面
-- 不能简单的将布尔表达式和字符串放在一起
-- 比如 WHERE state = 'VA' OR 'GL' OR 'LA', 这是不对的
-- 这时候就可以用IN了
SELECT *
FROM customers
WHERE state IN ('VA', 'FL', 'GA') -- 此处在IN前面加NOT就得到了相反的结果

# 练习2.4
-- Return products with
-- 	quantity in stock equal to 49, 38, 72
SELECT * 
FROM products 
WHERE quantity_in_stock IN (49, 38, 72)

# 2.5 The BETWEEN operator
SELECT *
FROM customers
WHERE points BETWEEN 1000 AND 3000; -- 范围值已经包含临界值，也就是>= AND <=

# 练习2.5
-- Return customers born
-- between 1/1/1990 and 1/1/2000
SElECT *
FROM customers
WHERE birth_date BETWEEN '1990-01-01' AND '2000-01-01'

# 2.6 The LIKE operator
-- 当我们想选择姓以B开头的顾客：
SELECT *
FROM customers
-- WHERE last_name LIKE 'BRUSH%' -- %表示任意字段数，B大小写均可
-- WHERE last_name LIKE '%b%' -- 这里表示b前后可有任意字符，也就是姓有b就行
-- WHERE last_name LIKE '%y' -- 姓以y结尾
WHERE last_name LIKE 'b____y' -- 下划线'_'表示一个字符长度
-- % any number of characters
-- _ single character

# 练习 2.6
-- Get the customers whose 
-- 	address contain TRAIL or AVENUE
-- 	phone number end with 9
-- 	其实这俩练习应该分开的，我没注意

SELECT * 
FROM customers
WHERE address LIKE '%TRAIL%' OR address LIKE '%AVENUE%' 
								-- 一定要注意布尔表达式和字符串不能直接连接！
	  AND phone LIKE '%9'

# 2.7 The REGEXP operator 正则表达式
SELECT *
FROM customers
-- WHERE last_name LIKE '%field%'
-- WHERE last_name REGEXP 'field' -- 和第三行等效

-- '^a'表示以a开头, 'a$'表示以a结尾
-- WHERE last_name REGEXP '^b'
-- WHERE last_name REGEXP 'a$'

-- WHERE last_name REGEXP 'field' OR last_name REGEXP 'mac'
-- WHERE last_name REGEXP '^field|mac|rose' -- 与上一行等效但是更简洁
-- ‘|’表示多个搜索模式, 也可以加入^以及$。

WHERE last_name REGEXP '[gim]e' -- 等效'e[gim]'
-- 返回任意ge, ie, me组合的姓
-- 如果是符合一个范围的搜索，可以用'[a-h]e'表示a到h和e组合

-- 总结
-- ^ beginning 
-- $ end
-- | logical OR
-- [abcd]
-- [a-f]

# 练习2.7
-- Get the customers whose
-- 	first name are ELKA or AMBUR
-- 	last names end with EY or ON
-- 	last names start with MY or contains SE
-- 	last names contain B followed by R or U
SELECT *
FROM customers
WHERE first_name REGEXP 'ELKA|AMBUR' -- 4, 6 
 	OR last_name REGEXP 'EY$|ON$' -- 1, 3, 5, 7
	OR last_name REGEXP '^MY|SE' -- 4, 8, 10
	OR last_name REGEXP 'BR|BU' -- 等效'b[ru]',  2, 4

# 2.8 The IS NULL operator
SELECT * 
FROM customers
WHERE phone IS NULL -- 5 在NULL前面加NOT得到相反结果

# 练习2.8
-- Get the orders that are not shipped
SELECT *
FROM orders
WHERE shipped_date IS NULL -- if date or shipped_id is NULL then it's not shipped
-- WHERE shipped_id IS NULL -- 一样的, 1, 3, 4, 6, 8

# 2.9 ORDER By Clause
SELECT * FROM customers
/*
点击任意表格的‘扳手’图标
在column name列，带黄色图标表示主键列
以及/*及其反写用于多行注释！好知识
*/
-- ORDER BY first_name DESC -- 默认升序，DESC表示降序fo
-- ascending升序 descending降序
ORDER BY state DESC, first_name DESC -- 优先按照state排名然后再是姓
-- 降序记得依次添加

/*
在选择有限列的时候
可以根据未选择的列来排列
*/
SELECT first_name, last_name, 10 + points AS points
FROM customers
ORDER BY points, first_name
-- 还有一种方法是直接用1, 2表示已经选择的列
-- 比如ORDER BY 1, 2 表示按照first_name, last_name来排序
-- 但这种方法不明了，尽量别用

# 练习2.9
SELECT *, quantity * unit_price AS total_price
 FROM order_items
WHERE order_id = 2
ORDER BY total_price DESC

# 2.10 The LIMIT Clause
SELECT *
FROM customers
LIMIT 3 -- first 3 lines limited
/*
如果要分页可在前面加一个数字用作offset
也就是跳过多少多少条
假设有三页数据如下：
-- page 1: 1 - 3 customers
-- page 2: 4 - 6
-- page 3: 7 - 9
若要查询第三页的顾客
可用-- LIMIT 6, 3
代表跳过前6项，查询接下来3项的数据
*/

# 练习2.10
-- Get the top three loyal customers
-- (which means who have the most points)
SELECT * FROM customers
ORDER BY points DESC
LIMIT 3 

-- 一定要注意语句顺序！
