# 11.1 Transactions
/*
Transaction: is a group of SQL statements that represent a single unit of work. 
Transaction has the below properties which we refer to ACID: 
Atomicity: Each transaction either execute all statements successfully, or fail and restart all statements. 
Consistency: (?) Database remain consistent. 
Isolation: Each transaction work independently, with none effecting others. 
Durability: The changes that transaction make are permanent, regardless of accidents like server crash. 
*/

# 11.2 Creating Transactions
USE sql_store; 

START TRANSACTION; 

INSERT INTO orders(customer_id, order_date, status)
VALUES(1, '2019-01-01', 1); 

INSERT INTO order_items
VALUES(LAST_INSERT_ID(), 1, 1, 1); 

COMMIT; -- 如果想做错误检查则用ROLLBACK而非COMMIT

SHOW VARIABLES LIKE 'autocommit'; 
/*
这个变量表示了MySQL会自动装包我们输入的语句到Transaction里
当语句没有执行错误的时候，MYSQL会将它们一起打包并COMMIT执行
*/

# 11.3 Concurrency and Locking
-- 当超过一个用户同时使用数据库时，便是并发
-- 我们要尽量避免客户同时修改数据产生的冲突问题
USE sql_store; 
START TRANSACTION; 
UPDATE customers
SET points = points + 10
WHERE customer_id = 1; 
COMMIT; 
/*
把上一段语句放到两个终端模拟两个客户同时更新的场景
当你执行一边的更新语句时候，MySQL会放一个“锁”在目前的更改上，防止另外一边更改同个数据库
*/

# 11.4 Concurrency Problems

# 这一章其实说的就是多线程常见的问题。

/*
1. Lost Update
If two transactions happen on the same data, 
the later one(transaction B) will overwrite the former one(transaction A), 
resulting in update A lost. 
To avoid this, MySQL has a 'Lock', 
forcing the two transcation run by order. 

2. Dirty Reads
当一个事务读取了不存在的数据时候
比如当A想给某顾客增添积分但是最终Rollback
而B尝试给这个积分做基于其的改动
最终B会对着不存在的数据进行操作
MySQL has 'Isolation Levels' to avoid this. 

3. Non-repeating Reads
The first read is not consistent with the second read, 
when there is another transaction changing the value of the reads. 
(But basically don't worry about this. Isolation transcation helps with this too. )

4. Phantom Reads
在你基于一个数值，比如积分，执行了查询A后，另外一个Transaction B更新了你查询的对象
那么后更新的人就不在你所做的商业更改里面。
这就是所谓的Phantom reads. 但是很好解决，一般再跑一次查询A就好了。
*/

