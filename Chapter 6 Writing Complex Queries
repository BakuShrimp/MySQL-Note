# 6.1
-- 用课程文件将数据库还原成默认状态。

# 6.2 Subqueries
-- 先用一段简单的查询热热身：
-- Find products that are more
-- expensive than lettuce (id = 3)
USE sql_store; 
SELECT * 
FROM products
WHERE unit_price > (
	SELECT unit_price 
    FROM products 
    WHERE product_id = 3)

# 练习6.2
-- In sql_hr databases: 
--  	find employees whose earn more than average
-- 我想插入一条新纪录显示平均工资的但是失败了。日后再试。
USE sql_hr;

SELECT 
	employee_id, 
    first_name, 
    last_name, 
    salary
FROM employees
WHERE salary >= (
	SELECT AVG(salary)
    FROM employees
    )

# 6.3 The IN Operator
-- Find the products that have never been ordered
/*
与上一节不同，上一节返回的是单独一个值用于比较
这一节返回了一个列表用于比较
如果想要，也可以返回一整个表。
*/
USE sql_store; 
SELECT *
FROM products
WHERE product_id NOT IN (
	SELECT DISTINCT product_id
    FROM order_items)

# 练习6.3
-- Find clients without invoices
USE sql_invoicing; 
SELECT *
FROM clients 
WHERE client_id NOT IN (
	SELECT DISTINCT client_id
    FROM invoices
    )

# 6.4 Subqueries VS Join
/*
这是上一节课代码的另一种使用JOIN的表达方式
在子查询和JOIN的选择中，要考虑1.表现（比如执行时间长短）2.可读性
在这个例子中，子查询更为直观，因为它更符合解决预设问题的逻辑
*/
SELECT *
FROM clients
LEFT JOIN invoices USING (client_id)
WHERE invoice_id IS NULL

# 练习6.4
-- Find customers who have ordered lettuce (id = 3)
-- 		Select customer_id, first_name, last_name
-- 解法1：只嵌套子查询
USE sql_store; 
SELECT 
	customer_id, 
    first_name, 
    last_name
FROM customers
WHERE customer_id IN (
	SELECT customer_id
	FROM orders 
	WHERE order_id IN (
		SELECT DISTINCT order_id
		FROM order_items
		WHERE product_id = 3))
ORDER BY customer_id

--  解法2：只使用JOIN
USE sql_store; 
SELECT 
	DISTINCT customer_id, 
    first_name, 
    last_name
FROM customers c
JOIN orders o USING (customer_id)
JOIN order_items oi
	ON o.order_id = oi.order_id
-- 这里也可以直接USING(order_id)
WHERE oi.product_id = 3
ORDER BY customer_id

-- 解法3：交替使用子查询和JOIN
USE sql_store; 
SELECT 
	customer_id, 
    first_name, 
    last_name
FROM customers
WHERE customer_id IN (
	SELECT customer_id
	FROM orders 
    JOIN order_items oi USING (order_id)
    WHERE oi.product_id = 3
    )
ORDER BY customer_id

# 6.5 The ALL Keyword
-- Select invoices larger than all invoices of 
-- client 3
-- 方法1：用MAX写子查询
USE sql_invoicing; 
SELECT *
FROM invoices
WHERE invoice_total > (
	SELECT MAX(invoice_total)
    FROM invoices
    WHERE client_id = 3);
-- 方法2：运用ALL写
-- ALL() 代表括号里的查询返回的所有值
USE sql_invoicing; 
SELECT *
FROM invoices
WHERE invoice_total > ALL (
	SELECT invoice_total
    FROM invoices
    WHERE client_id = 3)
-- 两种方法没有优劣之分，看个人喜好

# 6.6 The ANY Keyword
-- 上一节学了ALL，类似的还有ANY和SOME
-- 可以理解ALL = AND， ANY = OR
-- 练习：Select clients with at least two invoices
USE sql_invoicing; 
SELECT *
FROM clients
WHERE client_id IN ( -- IN可以换为 = ANY
	SELECT 
		DISTINCT client_id
--    COUNT(*) AS invoice_number
-- 这里之所以在SELECT列中没有GROUP BY的变量
-- 是因为COUNT(*)可以视作内置聚合函数
-- 只有非聚合函数字段需要和GROUP BY保持一致！
	FROM invoices
	GROUP BY client_id
	HAVING COUNT(*) >= 2
)

# 6.7 Correlated Subqueries
-- 开始之前做个练习：
-- Select employees whose salary is
-- larger than the average in their office
USE sql_hr; 
SELECT *
FROM employees e
WHERE salary > (
	SELECT 
		AVG(salary)
	FROM employees 
	WHERE office_id = e.office_id
)
/*
相关子查询的意思就是在子查询里调用了主查询里出现的别名
从而多次历遍结果，得到多次结果
因为有主查询和子查询有直接相关性所以称为相关子查询
以区分，可以看上一节的子查询得到的结果，仅得到一次性的一个列表，且并无直接调用主查询出现的别名。
*/

# 练习6.7
-- Get invoices that are larger than the
-- client's average invoice amount
-- 弹幕：如果不明白可以试试SQLZOO Select with SELECT的9 10题
USE sql_invoicing; 
SELECT *
FROM invoices i
WHERE invoice_total > (
	SELECT AVG(invoice_total)
    FROM invoices
    WHERE client_id = i.client_id
)
