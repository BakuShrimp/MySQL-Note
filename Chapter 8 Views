# 8.1 Creating Views
-- 当你要重复利用一段查询的结果时，创建一个视图是很方便的工具。
USE sql_invoicing; 
CREAtE VIEW sales_by_client AS
SELECT 
	c.client_id,
	c.name, 
    SUM(invoice_total) AS total_sales
FROM clients c
JOIN invoices USING (client_id)
GROUP BY client_id, name
/*
现在，刚才创造的临时表便被存为了实体表格
并被保存在了所使用的库的Views里面
记得刷新库，才能看到新创建的Views
*/

# 练习8.1
-- Create a view to see the balance of each client. 
-- name it clients_balance: client_id, name, balance. 
CREATE VIEW clients_balance AS
SELECT 
    client_id, 
    c.name, 
    SUM(payment_total) - SUM(invoice_total) AS balance
FROM invoices i
RIGHT JOIN clients c USING (client_id)
GROUP BY client_id, name

# 8.2 Altering or Dropping Views
-- 1. Drop one view first, then create a new one. 
-- Using: DROP VIEW 'view_name'
-- 2. Alter a view using CREATE OR REPLACE VIEW + ...
-- Hot key for saving views: ctrl + s
CREATE OR REPLACE VIEW sales_by_client AS
SELECT 
	c.client_id, 
    c.name, 
    SUM(invoice_total - payment_total) AS total_sale
FROM clients c
JOIN invoices i USING (client_id)
GROUP BY client_id, name

# 8.3 Updatable Views
/*
If a view doesn't have the belowing clause: 
DISTINCT
Aggregate functions (SUM, COUNT etc. )
GROUP BY/HAVING 
UNION; 
We call it an updatable view. 
Which means we can use 	INSERT, UPDATE, DELETE in such views. 
*/
CREATE OR REPLACE VIEW invoices_with_balance AS 
SELECT 
	i.invoice_id, 
    i.number, 
    i.client_id, 
    invoice_total, 
    payment_total, 
    invoice_total - payment_total AS balance, 
    due_date, 
    payment_date
FROM invoices i
WHERE invoice_total - payment_total > 0
/*
更新视图的一些案例：
UPDATE invoices_with_balance
SET due_date = DATE_ADD(due_date, INTERVAL 2 DAY)
WHERE invoice_id = 2
*/

# 8.4 The WITH OPTION CHECK Clause
-- 在一些常见的情况下，更新视图可能导致行消失
-- 为了防止这种情况发生，可以在视图代码最后加上WITH CHECK OPTION (可见8.3视图代码
-- 以防止视图更新导致行消失，如果要消失会报错。
UPDATE invoices_with_balance
SET payment_total = invoice_total
WHERE invoice_id = 3

# 8.5 Other Benifits of Views
/*
1. Simplify queries
2. Reduce the impact of changes: you can regard VIEWS as backups of original data sets. 
3. Restrict access to original data
*/
