# 汇总数据

# 练习5.1
-- 写一个查询得到一个表格，其中包含：
-- 2019前半年销售记录；2019后半年销售记录；总计。
-- 指标包含：总销售，销售支付记录，我们仍需得到的支付记录(what_we_expect)

/*
这个练习卡了我最久的居然是如何添加第一列命名列
但是其实直接 SELECT '字符串' AS 列名
就可以解决！！！！！！！
*/

USE sql_invoicing; 
	SELECT 
		'First half of 2019' AS date_range, 
		SUM(invoice_total) AS total_sales, -- don't use ';'! 
		SUM(payment_total) AS payment_total, 
		SUM(invoice_total - payment_total) AS what_we_expect
	FROM invoices
	WHERE invoice_date 
			BETWEEN '2019-01-01' AND '2019-06-30'
	-- WHERE invoice_date BETWEEN!!!! 用BETWEEN更简便！
	UNION
	SELECT 
		'Second half of 2019' AS date_range, 
		SUM(invoice_total) AS total_sales, 
		SUM(payment_total) AS payment_total, 
		SUM(invoice_total - payment_total) AS what_we_expect
	FROM invoices
	WHERE invoice_date 
			BETWEEN '2019-07-01' AND '2019-12-31'
	UNION
	SELECT 
		'Total' AS date_range, 
		SUM(invoice_total) AS total_sales, 
		SUM(payment_total) AS payment_total, 
		SUM(invoice_total - payment_total) AS what_we_expect
	FROM invoices
	WHERE invoice_date
			BETWEEN '2019-01-01' AND '2019-12-31'

# 5.2 GROUP BY Clause
-- 一个具体案例：根据顾客id来分类销售总额，限定为上半年期间的销售，且按照销售额从大到小来排序。
-- 注意子句顺序。
SELECT 
	client_id, 
	SUM(invoice_total) AS total_sales
FROM invoices
WHERE invoice_date
		BETWEEN '2019-01-01' AND '2019-06-30'
GROUP BY (client_id)
ORDER by total_sales DESC

-- 按照多个列来分类的例子：
# 5.2 GROUP BY Clause
-- 一个具体案例：根据顾客id来分类销售总额，限定为上半年期间的销售，且按照销售额从大到小来排序。
-- 注意！：GROUP BY的子列一定要在SELECT里面列出来。
SELECT 
    c.city, 
    c.state, 
	SUM(i.invoice_total) AS total_sales
FROM invoices i
JOIN clients c
	 USING (client_id)
GROUP BY state, city

# 练习5.2
-- 写一段查询得到一个结果：
-- 包含日期（2019上半年），支付方法，总支付额。
-- 我写的v1：并没有解决按照日期GROUP BY的问题，只是长得像而已
USE sql_invoicing; 
SELECT 
	  i.payment_date AS date, 
	  pm.name AS payment_method, 
      p.amount AS total_payments
FROM invoices i
JOIN payments p
	 USING (invoice_id)
JOIN payment_methods pm
	 ON p.payment_method = pm.payment_method_id
WHERE i.payment_date IS NOT NULL
ORDER BY date

-- 按照老师给的答案改的：
-- 这里必须用SUM，之后才可以用payment_method排列，因为结果要求的是按照不同计算方法计算得到的‘总额’。
USE sql_invoicing; 
SELECT
	  p.date, 
	  pm.name AS payment_method, 
      SUM(p.amount) AS total_payments
FROM payments p
JOIN payment_methods pm
	 ON p.payment_method = pm.payment_method_id
-- WHERE i.payment_date IS NOT NULL
GROUP BY date, payment_method
ORDER BY date
	
# 5.3 The HAVING Clause
-- 优先级：WHERE > GROUP BY > HAVING
-- 所以如果想用分组结果来进行筛选，不能直接使用WHERE
-- 而应该使用HAVING, 注意HAVING的变量也得在SELECT里面有。
SELECT
	client_id, 
    SUM(invoice_total) AS total_sales, 
    COUNT(*) AS number_of_invoices
FROM invoices
GROUP BY client_id
HAVING total_sales > 500 AND number_of_invoices > 5

# 练习5.3
-- Get the customers
--	   located in Virginia(VA)
-- 	   who have spent > $100
-- 老师的示范视频是修改过数据的，结果不同不必焦虑，找准思路就行。
USE sql_store; 
-- 默认：在没有GROUP BY的前提下使用聚合函数是不可以的(ONLY_FULL_GROUP_BY模式下)
-- 所以这里只用SUM()不用GROUP BY的话会报错1140
-- https://stackoverflow.com/questions/1244169/mysql-1140-mixing-of-group-columns
SELECT
	c.customer_id, 
    c.first_name, 
    c.last_name, 
    SUM(oi.quantity * oi.unit_price) AS total_sales
FROM customers c
JOIN orders o
	USING (customer_id)
JOIN order_items oi
	USING (order_id)
WHERE state = 'VA'
GROUP BY
	c.customer_id, 
    c.first_name, 
    c.last_name
HAVING total_sales >= 100
