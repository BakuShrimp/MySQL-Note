# 汇总数据

# 练习5.1
-- 写一个查询得到一个表格，其中包含：
-- 2019前半年销售记录；2019后半年销售记录；总计。
-- 指标包含：总销售，销售支付记录，我们仍需得到的支付记录(what_we_expect)

/*
这个练习卡了我最久的居然是如何添加第一列命名列
但是其实直接 SELECT '字符串' AS 列名
就可以解决！！！！！！！
*/

USE sql_invoicing; 
	SELECT 
		'First half of 2019' AS date_range, 
		SUM(invoice_total) AS total_sales, -- don't use ';'! 
		SUM(payment_total) AS payment_total, 
		SUM(invoice_total - payment_total) AS what_we_expect
	FROM invoices
	WHERE invoice_date 
			BETWEEN '2019-01-01' AND '2019-06-30'
	-- WHERE invoice_date BETWEEN!!!! 用BETWEEN更简便！
	UNION
	SELECT 
		'Second half of 2019' AS date_range, 
		SUM(invoice_total) AS total_sales, 
		SUM(payment_total) AS payment_total, 
		SUM(invoice_total - payment_total) AS what_we_expect
	FROM invoices
	WHERE invoice_date 
			BETWEEN '2019-07-01' AND '2019-12-31'
	UNION
	SELECT 
		'Total' AS date_range, 
		SUM(invoice_total) AS total_sales, 
		SUM(payment_total) AS payment_total, 
		SUM(invoice_total - payment_total) AS what_we_expect
	FROM invoices
	WHERE invoice_date
			BETWEEN '2019-01-01' AND '2019-12-31'

# 5.2 GROUP BY Clause
-- 一个具体案例：根据顾客id来分类销售总额，限定为上半年期间的销售，且按照销售额从大到小来排序。
-- 注意子句顺序。
SELECT 
	client_id, 
	SUM(invoice_total) AS total_sales
FROM invoices
WHERE invoice_date
		BETWEEN '2019-01-01' AND '2019-06-30'
GROUP BY (client_id)
ORDER by total_sales DESC

-- 按照多个列来分类的例子：
# 5.2 GROUP BY Clause
-- 一个具体案例：根据顾客id来分类销售总额，限定为上半年期间的销售，且按照销售额从大到小来排序。
SELECT 
    c.city, 
    c.state, 
	SUM(i.invoice_total) AS total_sales
FROM invoices i
JOIN clients c
	 USING (client_id)
GROUP BY state, city

# 练习5.2
-- 写一段查询得到一个结果：
-- 包含日期（2019上半年），支付方法，总支付额。
-- 我写的v1：并没有解决按照日期GROUP BY的问题，只是长得像而已
USE sql_invoicing; 
SELECT 
	  i.payment_date AS date, 
	  pm.name AS payment_method, 
      p.amount AS total_payments
FROM invoices i
JOIN payments p
	 USING (invoice_id)
JOIN payment_methods pm
	 ON p.payment_method = pm.payment_method_id
WHERE i.payment_date IS NOT NULL
ORDER BY date

-- 按照老师给的答案改的：
USE sql_invoicing; 
SELECT
	  p.date, 
	  pm.name AS payment_method, 
      SUM(p.amount) AS total_payments
FROM payments p
JOIN payment_methods pm
	 ON p.payment_method = pm.payment_method_id
-- WHERE i.payment_date IS NOT NULL
GROUP BY date, payment_method
ORDER BY date
	
