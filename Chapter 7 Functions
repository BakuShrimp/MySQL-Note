# 7.1 Numeric Functions
SELECT 
	ROUND(5.7345, 2), -- 四舍五入
    TRUNCATE(5.7345, 2),  -- 直接截断
    CEILING(5.2),  -- 向上取整
    FLOOR(5.9),  -- 向下取整
    ABS(-5.2),  -- 取绝对值
    RAND() -- Random取随机数
-- Google mysql numeric functions for more

# 7.2 String Functions
SELECT 
	LENGTH('sky'), -- calculate its length
    UPPER('sky'), -- make it capital letter
    LOWER('SKY'),  -- make it lower case
    LTRIM('    sky'),  -- left trim the spaces
    RTRIM('sky    '),  -- Right trim the spaces
    -- 在python里是lstrip/rstrip
    TRIM('  sky   '), 
    LEFT('Kindergarten', 4),  -- similarly, we have RIGHT('', x)
    SUBSTRING('Kindergarten', 3, 5),  -- 从字符串第3位开始选取5个字符
    LOCATE('N', 'Kindergarten'), -- 不区分大小写
    REPLACE('Kindergarten', 'garten', 'garden'), -- Replace 'garten' in 'Kindergarten' with 'garden'
    CONCAT('first', 'last') -- Concatenation, 连接两个变量
-- CONCAT() example: 
USE sql_store; 
SELECT CONCAT(first_name, ' ', last_name) AS full_name
FROM customers
-- Google 'Mysql string functions' for more

-- 7.3 Date functions
SELECT 
	NOW(), -- Get current time (FULL) on ur pc. 
    CURDATE(), -- Get current date on ur pc. 
    CURTIME(), -- Get current time on ur pc. 
    YEAR(NOW()), -- Year can be replaced with 'Month', 'Day', 'Hour' etc. 
    DAYNAME(NOW()), 
    MONTHNAME(NOW()), -- Return strings. 
    EXTRACT(DAY FROM NOW()) -- 当你想要将数据转移到别的DBMS时会很有用。

# 练习7.3
-- 修改之前写过的提取2019年的订单的代码使其更为准确
-- 使用刚学过的Date functions.
USE sql_store; 
SELECT *
FROM orders
WHERE YEAR(order_date) = 2019
-- WHERE EXTRACT(YEAR FROM order_date) = 2019 -- 同理

# 7.4 Formatting Dates and Times
SELECT 
	DATE_FORMAT(NOW(), '%M %D %Y'),  -- change capital to lower case for different outcome
	DATE_FORMAT(NOW(), '%H:%i %p')
-- Google 'mysql date format string' for more, especially the '%x'/'%X's. 

# 7.5 Calculating Dates and Times
SELECT 
	DATE_ADD(NOW(), INTERVAL 1 DAY), -- 给现在的时间加上一天，返回明天的同一时间点
    -- 同理替换DAY with MONTH/YEAR, 修改1 with -1
    DATE_SUB(NOW(), INTERVAL 1 DAY), 
    DATEDIFF('2019-01-01 09:00', '2019-05-01 17:00'),  -- 只返回天数的间隔
    TIME_TO_SEC('09:00') - TIME_TO_SEC('09:02')

# 7.6 The IFNULL and COALESCE Functions
SELECT
	order_id, 
    IFNULL(shipper_id, 'Not assigned') AS shipper, 
    COALESCE(shipper_id, comments, 'Not assigned') AS shipper
    -- COALESCE() 会检查前两个变量是否都是空值，如果都是则会返回指定内容，如果第一/二个不是会返回第一/二个内容。
FROM orders

# 练习7.6
SELECT 
	CONCAT(first_name, ' ', last_name) AS customer, 
    IFNULL(phone, 'Unknown') AS phone    
FROM customers

# 7.7 The IF Fucntion
SELECT
	order_id,
	order_date, 
    IF(YEAR(order_date) = 2019, 'Active', 'Archived') AS new_comments
FROM orders

# 练习7.7
SELECT 
	p.product_id, 
    name, 
    COUNT(oi.product_id) AS orders, -- 这里可以写COUNT(*)
    IF(COUNT(oi.product_id) = 1, 'Once', 'Many times') AS frequency
FROM products p
JOIN order_items oi
USING (product_id)
GROUP BY product_id, name -- 我这里一开始没写name跑出来的结果是一样的
ORDER BY product_id

# 7.8 The CASE Operator
-- IF()只能测试俩条件，如果你要测试更多条件的话：
-- 用CASE可以解决。当然用IF嵌套IF也可以。
SELECT 
	order_id, 
    CASE
		WHEN YEAR(order_date) = 2019
			THEN 'Active'
		WHEN YEAR(order_date) = 2018
			THEN 'Last year'
		WHEN YEAR(order_date) < 2018
			THEN 'Archived'
		ELSE 'Future'
	END AS category
FROM orders

# 练习7.8
SELECT 
	CONCAT(first_name, ' ', last_name) AS customer, 
    points, 
    CASE
		WHEN points > 3000 THEN 'Gold'
        WHEN points BETWEEN 2000 AND 3000 THEN 'Silver'
        ELSE 'Bronze'
	END AS category
FROM customers
ORDER BY points DESC
